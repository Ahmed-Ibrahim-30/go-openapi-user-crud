basePath: /
definitions:
  main.User:
    properties:
      ID:
        type: integer
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        description: donâ€™t expose in JSON
        type: string
      role:
        description: User or Admin
        type: string
    type: object
  main.UserInput:
    properties:
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  main.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: My API
  version: "1.0"
paths:
  /users/{id}:
    get:
      description: Get a single user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: User not found
          schema:
            type: string
      summary: Get specific User By ID
      tags:
      - users
  /users/Delete/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User Deleted
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete New User
      tags:
      - users
  /users/GetAllUsers:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
      summary: Get all Users
      tags:
      - users
  /users/Update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Update User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/main.User'
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Update New User
  /users/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Login User
      tags:
      - users
  /users/signUp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Invalid input
          schema:
            type: string
      summary: SignUp New User
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
