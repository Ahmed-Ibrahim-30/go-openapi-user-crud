openapi: 3.0.0
info:
  contact: {}
  title: My API
  version: "1.0"
paths:
  "/users/{id}":
    get:
      description: Get a single user by its ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/main.User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
      summary: Get specific User By ID
      tags:
        - users
  "/users/Delete/{id}":
    delete:
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User Deleted
          content:
            application/json:
              schema:
                type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
      summary: Delete New User
      tags:
        - users
  /users/GetAllUsers:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/main.User"
                type: array
      summary: Get all Users
      tags:
        - users
  "/users/Update/{id}":
    put:
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/main.User"
        description: Update User
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/main.User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
      summary: Update New User
  /users/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/main.UserLogin"
        description: Login
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/main.User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
      summary: Login User
      tags:
        - users
  /users/signUp:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/main.UserInput"
        description: Create User
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/main.User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
      summary: SignUp New User
      tags:
        - users
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    BearerAuth:
      in: header
      name: Authorization
      type: apiKey
  schemas:
    main.User:
      properties:
        ID:
          type: integer
        address:
          type: string
        age:
          type: integer
        email:
          type: string
        name:
          type: string
        password:
          description: donâ€™t expose in JSON
          type: string
        role:
          description: User or Admin
          type: string
      type: object
    main.UserInput:
      properties:
        address:
          type: string
        age:
          type: integer
        email:
          type: string
        name:
          type: string
        password:
          type: string
      type: object
    main.UserLogin:
      properties:
        email:
          type: string
        password:
          type: string
      type: object
